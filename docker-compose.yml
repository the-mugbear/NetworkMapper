# NetworkMapper Unified Docker Compose Configuration
# Environment variables control deployment mode:
# - SSL_MODE=true for HTTPS production
# - TEST_MODE=true for test instance (ports 3001/8001)

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-networkMapper}
      POSTGRES_USER: ${POSTGRES_USER:-nmapuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-nmappass}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      args:
        CACHE_BUST: ${CACHE_BUST:-}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    env_file:
      - ${ENV_FILE:-.env.network}
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-nmapuser}:${POSTGRES_PASSWORD:-nmappass}@db:5432/${POSTGRES_DB:-networkMapper}
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:3000}
      SSL_ENABLED: ${SSL_MODE:-false}
    depends_on:
      - db
    volumes:
      - ./uploads:/app/uploads
      - ./backend/tests:/app/tests
      - ./backend/pytest.ini:/app/pytest.ini
      - ./scripts:/app/scripts
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      args:
        CACHE_BUST: ${CACHE_BUST:-}
    ports:
      - "${FRONTEND_PORT:-3000}:${FRONTEND_INTERNAL_PORT:-3000}"
      - "${HTTPS_PORT:-443}:443"
    env_file:
      - ${ENV_FILE:-.env.network}
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8000}
    volumes:
      - ./ssl/certs:/etc/ssl/certs:ro
      - ./ssl/private:/etc/ssl/private:ro
      - ${NGINX_CONFIG:-./default-nginx.conf}:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge