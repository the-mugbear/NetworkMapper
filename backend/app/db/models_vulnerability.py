"""
Vulnerability Data Models

Dedicated schema for storing vulnerability information from various security tools
with source attribution for conflict resolution.
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Float, Boolean, Enum as SQLEnum
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime
import enum

from app.db.session import Base


class VulnerabilitySource(str, enum.Enum):
    """Enumeration of vulnerability data sources"""
    NESSUS = "nessus"
    NMAP = "nmap"
    NETEXEC = "netexec"
    SHODAN = "shodan"
    CVE_API = "cve_api"
    MANUAL = "manual"


class VulnerabilitySeverity(str, enum.Enum):
    """Standardized vulnerability severity levels"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"
    UNKNOWN = "unknown"


class Vulnerability(Base):
    """
    Core vulnerability record with standardized fields
    """
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)

    # Core vulnerability identification
    cve_id = Column(String(20), index=True)  # CVE-2023-1234
    plugin_id = Column(String(50), index=True)  # Tool-specific ID (Nessus plugin, etc)
    title = Column(String(500), nullable=False)
    description = Column(Text)

    # Risk assessment
    severity = Column(SQLEnum(VulnerabilitySeverity), nullable=False, index=True)
    cvss_score = Column(Float)  # 0.0 - 10.0
    cvss_vector = Column(String(200))

    # Source attribution
    source = Column(SQLEnum(VulnerabilitySource), nullable=False, index=True)
    source_plugin_name = Column(String(200))  # Original plugin/check name

    # Discovery context
    host_id = Column(Integer, ForeignKey("hosts_v2.id"), nullable=False, index=True)
    port_id = Column(Integer, ForeignKey("ports_v2.id"), nullable=True, index=True)  # Null for host-level vulns
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False, index=True)

    # Timestamps
    first_seen = Column(DateTime, default=datetime.utcnow)
    last_seen = Column(DateTime, default=datetime.utcnow)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    host = relationship("Host", back_populates="vulnerabilities")
    port = relationship("Port", back_populates="vulnerabilities")
    scan = relationship("Scan", back_populates="vulnerabilities")

    # Additional metadata
    solution = Column(Text)
    references = Column(Text)  # JSON array of URLs/references
    exploitable = Column(Boolean, default=False)

    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            "id": self.id,
            "cve_id": self.cve_id,
            "plugin_id": self.plugin_id,
            "title": self.title,
            "description": self.description,
            "severity": self.severity.value if self.severity else None,
            "cvss_score": self.cvss_score,
            "source": self.source.value if self.source else None,
            "source_plugin_name": self.source_plugin_name,
            "host_id": self.host_id,
            "port_id": self.port_id,
            "scan_id": self.scan_id,
            "first_seen": self.first_seen.isoformat() if self.first_seen else None,
            "last_seen": self.last_seen.isoformat() if self.last_seen else None,
            "solution": self.solution,
            "exploitable": self.exploitable
        }


class HostAttribute(Base):
    """
    Host attributes with source attribution for conflict resolution
    Allows multiple values per attribute type from different sources
    """
    __tablename__ = "host_attributes"

    id = Column(Integer, primary_key=True, index=True)
    host_id = Column(Integer, ForeignKey("hosts_v2.id"), nullable=False, index=True)

    # Attribute details
    attribute_type = Column(String(50), nullable=False, index=True)  # hostname, os_name, os_version, etc
    value = Column(String(500), nullable=False)
    confidence = Column(Float, default=1.0)  # 0.0 - 1.0 confidence score

    # Source attribution
    source = Column(String(50), nullable=False, index=True)  # nmap, nessus, netexec, etc
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False, index=True)

    # Timestamps
    first_seen = Column(DateTime, default=datetime.utcnow)
    last_seen = Column(DateTime, default=datetime.utcnow)

    # Relationships
    host = relationship("Host", back_populates="attributes")
    scan = relationship("Scan")

    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            "id": self.id,
            "attribute_type": self.attribute_type,
            "value": self.value,
            "confidence": self.confidence,
            "source": self.source,
            "scan_id": self.scan_id,
            "first_seen": self.first_seen.isoformat() if self.first_seen else None,
            "last_seen": self.last_seen.isoformat() if self.last_seen else None
        }


class PortAttribute(Base):
    """
    Port attributes with source attribution
    """
    __tablename__ = "port_attributes"

    id = Column(Integer, primary_key=True, index=True)
    port_id = Column(Integer, ForeignKey("ports_v2.id"), nullable=False, index=True)

    # Attribute details
    attribute_type = Column(String(50), nullable=False, index=True)  # service_name, service_version, banner, etc
    value = Column(String(1000), nullable=False)
    confidence = Column(Float, default=1.0)

    # Source attribution
    source = Column(String(50), nullable=False, index=True)
    scan_id = Column(Integer, ForeignKey("scans.id"), nullable=False, index=True)

    # Timestamps
    first_seen = Column(DateTime, default=datetime.utcnow)
    last_seen = Column(DateTime, default=datetime.utcnow)

    # Relationships
    port = relationship("Port", back_populates="attributes")
    scan = relationship("Scan")

    def to_dict(self):
        """Convert to dictionary for API responses"""
        return {
            "id": self.id,
            "attribute_type": self.attribute_type,
            "value": self.value,
            "confidence": self.confidence,
            "source": self.source,
            "scan_id": self.scan_id,
            "first_seen": self.first_seen.isoformat() if self.first_seen else None,
            "last_seen": self.last_seen.isoformat() if self.last_seen else None
        }