#!/usr/bin/env python3
"""
Database Migration: Add Vulnerability Schema

Creates new tables for structured vulnerability data with source attribution.
This migration adds:
- vulnerabilities table for standardized vulnerability data
- host_attributes table for source-attributed host data
- port_attributes table for source-attributed port data

Run with: python -m app.db.migrate_vulnerability_schema
"""

import logging
import sys
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

from app.core.config import settings
from app.db.models_vulnerability import Vulnerability, HostAttribute, PortAttribute
from app.db.models import Base

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_vulnerability_tables():
    """Create the new vulnerability tables"""

    try:
        # Connect to database
        engine = create_engine(settings.DATABASE_URL)

        logger.info("Creating vulnerability schema tables...")

        # Create tables
        Vulnerability.__table__.create(engine, checkfirst=True)
        HostAttribute.__table__.create(engine, checkfirst=True)
        PortAttribute.__table__.create(engine, checkfirst=True)

        logger.info("‚úÖ Successfully created vulnerability schema tables")

        # Create indexes for performance
        with engine.connect() as conn:
            logger.info("Creating indexes...")

            # Vulnerability indexes
            conn.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_vuln_host_severity
                ON vulnerabilities(host_id, severity);
            """))

            conn.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_vuln_cve
                ON vulnerabilities(cve_id) WHERE cve_id IS NOT NULL;
            """))

            conn.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_vuln_source_plugin
                ON vulnerabilities(source, plugin_id);
            """))

            # Host attributes indexes
            conn.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_host_attr_type_source
                ON host_attributes(host_id, attribute_type, source);
            """))

            # Port attributes indexes
            conn.execute(text("""
                CREATE INDEX IF NOT EXISTS idx_port_attr_type_source
                ON port_attributes(port_id, attribute_type, source);
            """))

            conn.commit()

        logger.info("‚úÖ Successfully created indexes")

    except Exception as e:
        logger.error(f"‚ùå Error creating vulnerability tables: {str(e)}")
        raise


def verify_migration():
    """Verify the migration was successful"""

    try:
        engine = create_engine(settings.DATABASE_URL)

        with engine.connect() as conn:
            # Check that tables exist
            tables_to_check = ['vulnerabilities', 'host_attributes', 'port_attributes']

            for table in tables_to_check:
                result = conn.execute(text(f"""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables
                        WHERE table_name = '{table}'
                    );
                """))

                exists = result.fetchone()[0]
                if exists:
                    logger.info(f"‚úÖ Table '{table}' created successfully")
                else:
                    raise Exception(f"Table '{table}' was not created")

            # Check indexes
            result = conn.execute(text("""
                SELECT indexname FROM pg_indexes
                WHERE indexname LIKE 'idx_vuln_%' OR indexname LIKE 'idx_host_attr_%' OR indexname LIKE 'idx_port_attr_%';
            """))

            indexes = [row[0] for row in result.fetchall()]
            logger.info(f"‚úÖ Created {len(indexes)} indexes: {', '.join(indexes)}")

        logger.info("üéâ Migration verification successful!")

    except Exception as e:
        logger.error(f"‚ùå Migration verification failed: {str(e)}")
        raise


def main():
    """Run the migration"""

    print("üöÄ Starting vulnerability schema migration...")

    try:
        create_vulnerability_tables()
        verify_migration()

        print("‚úÖ Vulnerability schema migration completed successfully!")
        print("\nNew capabilities added:")
        print("- Structured vulnerability data with CVE mapping")
        print("- Source attribution for conflict resolution")
        print("- Proper severity classification")
        print("- Host and port attribute tracking")

        return 0

    except Exception as e:
        print(f"‚ùå Migration failed: {str(e)}")
        return 1


if __name__ == "__main__":
    sys.exit(main())