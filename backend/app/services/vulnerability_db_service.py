"""
Vulnerability Database Service

Manages the CVE vulnerability database and provides vulnerability lookup functionality.
"""

import logging
from typing import List, Dict, Any, Optional
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from app.db.models_risk import VulnerabilityDatabase

logger = logging.getLogger(__name__)


class VulnerabilityDatabaseService:
    """Service for managing vulnerability database"""

    def __init__(self, db: Session):
        self.db = db

    def seed_common_vulnerabilities(self):
        """Seed database with common vulnerabilities for testing"""

        common_vulns = [
            {
                'cve_id': 'CVE-2017-0144',
                'title': 'EternalBlue SMB Remote Code Execution',
                'description': 'Microsoft SMB Server remote code execution vulnerability used by WannaCry',
                'cvss_v3_score': 9.3,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H',
                'severity': 'Critical',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Windows Server 2008', 'Windows 7', 'Windows 8.1', 'Windows 10'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0144']
            },
            {
                'cve_id': 'CVE-2019-0708',
                'title': 'BlueKeep RDP Remote Code Execution',
                'description': 'Remote Desktop Protocol remote code execution vulnerability',
                'cvss_v3_score': 9.8,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
                'severity': 'Critical',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Windows 7', 'Windows Server 2008'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0708']
            },
            {
                'cve_id': 'CVE-2021-44228',
                'title': 'Log4Shell - Apache Log4j RCE',
                'description': 'Apache Log4j2 JNDI features do not protect against attacker controlled LDAP',
                'cvss_v3_score': 10.0,
                'cvss_v3_vector': 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H',
                'severity': 'Critical',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Apache Log4j', 'Various Java Applications'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44228']
            },
            {
                'cve_id': 'CVE-2016-0777',
                'title': 'OpenSSH Information Disclosure',
                'description': 'OpenSSH client information disclosure vulnerability',
                'cvss_v3_score': 4.3,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N',
                'severity': 'Medium',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['OpenSSH 6.8', 'OpenSSH 6.9'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-0777']
            },
            {
                'cve_id': 'CVE-2019-0197',
                'title': 'Apache HTTP Server mod_http2 DoS',
                'description': 'HTTP/2 DoS vulnerability in Apache HTTP Server',
                'cvss_v3_score': 7.5,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H',
                'severity': 'High',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Apache HTTP Server 2.4.17-2.4.38'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-0197']
            },
            {
                'cve_id': 'CVE-2019-20372',
                'title': 'Nginx HTTP Request Smuggling',
                'description': 'HTTP request smuggling vulnerability in Nginx',
                'cvss_v3_score': 5.3,
                'cvss_v3_vector': 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N',
                'severity': 'Medium',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Nginx 1.17.7', 'Nginx 1.16.1'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-20372']
            },
            {
                'cve_id': 'CVE-1999-0619',
                'title': 'Telnet Cleartext Transmission',
                'description': 'Telnet protocol transmits data in cleartext',
                'cvss_v3_score': 7.5,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N',
                'severity': 'High',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['All Telnet implementations'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0619']
            },
            {
                'cve_id': 'CVE-2020-1472',
                'title': 'Zerologon - Netlogon Elevation of Privilege',
                'description': 'Netlogon Remote Protocol elevation of privilege vulnerability',
                'cvss_v3_score': 9.8,
                'cvss_v3_vector': 'CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
                'severity': 'Critical',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Windows Server 2008-2019'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-1472']
            },
            {
                'cve_id': 'CVE-2017-5638',
                'title': 'Apache Struts2 Remote Code Execution',
                'description': 'Apache Struts2 REST plugin XStream RCE vulnerability',
                'cvss_v3_score': 9.8,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H',
                'severity': 'Critical',
                'attack_vector': 'Network',
                'attack_complexity': 'Low',
                'affected_products': ['Apache Struts 2.3.5-2.3.31', 'Apache Struts 2.5-2.5.10'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5638']
            },
            {
                'cve_id': 'CVE-2018-8174',
                'title': 'Windows VBScript Engine RCE',
                'description': 'Windows VBScript Engine remote code execution vulnerability',
                'cvss_v3_score': 7.5,
                'cvss_v3_vector': 'CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:H/I:H/A:H',
                'severity': 'High',
                'attack_vector': 'Network',
                'attack_complexity': 'High',
                'affected_products': ['Internet Explorer', 'Windows Script Host'],
                'references': ['https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8174']
            }
        ]

        logger.info("Seeding vulnerability database with common CVEs")

        for vuln_data in common_vulns:
            # Check if CVE already exists
            existing = self.db.query(VulnerabilityDatabase).filter(
                VulnerabilityDatabase.cve_id == vuln_data['cve_id']
            ).first()

            if existing:
                logger.debug(f"CVE {vuln_data['cve_id']} already exists, skipping")
                continue

            # Create new vulnerability record
            vuln = VulnerabilityDatabase(
                cve_id=vuln_data['cve_id'],
                title=vuln_data['title'],
                description=vuln_data['description'],
                cvss_v3_score=vuln_data['cvss_v3_score'],
                cvss_v3_vector=vuln_data['cvss_v3_vector'],
                severity=vuln_data['severity'],
                attack_vector=vuln_data['attack_vector'],
                attack_complexity=vuln_data['attack_complexity'],
                affected_products=vuln_data['affected_products'],
                references=vuln_data['references'],
                published_date=datetime(2023, 1, 1),  # Default date for seeded data
                last_updated=datetime.utcnow()
            )

            self.db.add(vuln)
            logger.debug(f"Added CVE {vuln_data['cve_id']} to database")

        try:
            self.db.commit()
            logger.info(f"Successfully seeded {len(common_vulns)} vulnerabilities")
        except Exception as e:
            self.db.rollback()
            logger.error(f"Error seeding vulnerabilities: {str(e)}")
            raise

    def lookup_vulnerability(self, cve_id: str) -> Optional[VulnerabilityDatabase]:
        """Look up a specific CVE in the database"""
        return self.db.query(VulnerabilityDatabase).filter(
            VulnerabilityDatabase.cve_id == cve_id
        ).first()

    def search_vulnerabilities_by_product(self, product_name: str, version: str = None) -> List[VulnerabilityDatabase]:
        """Search for vulnerabilities affecting a specific product"""
        query = self.db.query(VulnerabilityDatabase).filter(
            VulnerabilityDatabase.affected_products.contains([product_name])
        )

        return query.all()

    def get_high_severity_vulnerabilities(self, limit: int = 50) -> List[VulnerabilityDatabase]:
        """Get high and critical severity vulnerabilities"""
        return self.db.query(VulnerabilityDatabase).filter(
            VulnerabilityDatabase.severity.in_(['Critical', 'High'])
        ).order_by(VulnerabilityDatabase.cvss_v3_score.desc()).limit(limit).all()

    def get_vulnerability_stats(self) -> Dict[str, Any]:
        """Get vulnerability database statistics"""
        from sqlalchemy import func

        total_vulns = self.db.query(func.count(VulnerabilityDatabase.id)).scalar() or 0

        severity_counts = self.db.query(
            VulnerabilityDatabase.severity,
            func.count(VulnerabilityDatabase.id).label('count')
        ).group_by(VulnerabilityDatabase.severity).all()

        return {
            'total_vulnerabilities': total_vulns,
            'severity_distribution': {stat.severity: stat.count for stat in severity_counts},
            'last_updated': datetime.utcnow().isoformat()
        }