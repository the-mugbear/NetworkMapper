> Backend never finished booting on the prod host, so nginx forwarded your /api/v1/auth/login call to a dead upstream and the frontend tried to JSON.parse the 502 HTML.

  The exported logs.txt shows the failure:

  - ImportError: cannot import name 'HostFollow' from 'app.db.models' while FastAPI was starting (/app/app/services/host_follow_service.py pulls in HostFollow, HostNote, etc.).
  - Because the import blew up, Uvicorn exited and nginx logged repeated connect() failed (113: Host is unreachable) for every API call, including /api/v1/auth/login.

  We just staged and committed the missing modules on our side (backend/app/services/host_follow_service.py, ports_of_interest.py, risk_insight_service.py, vulnerability_service.py along with backend/app/db/
  models_vulnerability.py, migrate_vulnerability_schema.py, and the shared frontend utils/portsOfInterest.ts). Once you push the latest main and redeploy, rebuild the backend image so /app/app/db/models.py in the
  container includes the HostFollow/HostNote definitions the new services need.

  After pulling the updated branch on prod:

  1. Run docker compose down (or the appropriate option in scripts/deploy.sh) to clear the broken backend.
  2. Rebuild/restart (docker compose up -d --build or rerun ./scripts/deploy.sh) so the container picks up the new models/services.
  3. Verify the backend now stays up (docker compose logs backend | tail -n 20 should show “Application startup complete” with no import errors).
  4. Retry the login—you should get a 200 JSON payload again.

  If anything else goes sideways during the next deploy, re-run ./scripts/collect-logs.sh on prod and send back the archive; it now includes both the container logs and the latest ingestion_jobs / parse_errors
  rows, so we’ll have everything we need to troubleshoot quickly.

